# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String): PostsConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Page | Global | Posts

type PageBlocksBanner {
  headline: String
  text: JSON
  cta: String
  image: String
}

type PageBlocksServicesFeaturesImage {
  img: String
  alt: String
}

type PageBlocksServicesFeatures {
  image: PageBlocksServicesFeaturesImage
  featTitle: String
  featText: String
}

type PageBlocksServices {
  title: String
  description: JSON
  features: [PageBlocksServicesFeatures]
}

union PageBlocks = PageBlocksBanner | PageBlocksServices

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeaderActions {
  label: String
  type: String
  link: String
}

type GlobalHeader {
  background: String
  nav: [GlobalHeaderNav]
  actions: [GlobalHeaderActions]
}

type GlobalFooterBlocksLogoBlock {
  Image: String
}

type GlobalFooterBlocksNormalblockLinksNormalLink {
  label: String
  href: String
}

type GlobalFooterBlocksNormalblockLinksIconLink {
  icon: String
  label: String
  href: String
}

union GlobalFooterBlocksNormalblockLinks = GlobalFooterBlocksNormalblockLinksNormalLink | GlobalFooterBlocksNormalblockLinksIconLink

type GlobalFooterBlocksNormalblock {
  title: String
  links: [GlobalFooterBlocksNormalblockLinks]
}

union GlobalFooterBlocks = GlobalFooterBlocksLogoBlock | GlobalFooterBlocksNormalblock

type GlobalFooter {
  background: String
  blocks: [GlobalFooterBlocks]
}

type GlobalThemeColors {
  primary: String
  secondary: String
  accent: String
  muted: String
  dark: String
  link: String
  text: String
  textSecondary: String
  heading: String
  headingSecondary: String
  background: String
  backgroundSecondary: String
}

type GlobalTheme {
  colors: GlobalThemeColors
  modes: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Posts implements Node & Document {
  title: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
}

input DocumentMutation {
  page: PageMutation
  global: GlobalMutation
  posts: PostsMutation
}

input PageBlocksBannerMutation {
  headline: String
  text: JSON
  cta: String
  image: String
}

input PageBlocksServicesFeaturesImageMutation {
  img: String
  alt: String
}

input PageBlocksServicesFeaturesMutation {
  image: PageBlocksServicesFeaturesImageMutation
  featTitle: String
  featText: String
}

input PageBlocksServicesMutation {
  title: String
  description: JSON
  features: [PageBlocksServicesFeaturesMutation]
}

input PageBlocksMutation {
  banner: PageBlocksBannerMutation
  services: PageBlocksServicesMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderActionsMutation {
  label: String
  type: String
  link: String
}

input GlobalHeaderMutation {
  background: String
  nav: [GlobalHeaderNavMutation]
  actions: [GlobalHeaderActionsMutation]
}

input GlobalFooterBlocksLogoBlockMutation {
  Image: String
}

input GlobalFooterBlocksNormalblockLinksNormalLinkMutation {
  label: String
  href: String
}

input GlobalFooterBlocksNormalblockLinksIconLinkMutation {
  icon: String
  label: String
  href: String
}

input GlobalFooterBlocksNormalblockLinksMutation {
  normalLink: GlobalFooterBlocksNormalblockLinksNormalLinkMutation
  iconLink: GlobalFooterBlocksNormalblockLinksIconLinkMutation
}

input GlobalFooterBlocksNormalblockMutation {
  title: String
  links: [GlobalFooterBlocksNormalblockLinksMutation]
}

input GlobalFooterBlocksMutation {
  logoBlock: GlobalFooterBlocksLogoBlockMutation
  normalblock: GlobalFooterBlocksNormalblockMutation
}

input GlobalFooterMutation {
  background: String
  blocks: [GlobalFooterBlocksMutation]
}

input GlobalThemeColorsMutation {
  primary: String
  secondary: String
  accent: String
  muted: String
  dark: String
  link: String
  text: String
  textSecondary: String
  heading: String
  headingSecondary: String
  background: String
  backgroundSecondary: String
}

input GlobalThemeMutation {
  colors: GlobalThemeColorsMutation
  modes: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input PostsMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  